def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board, player):
    # Check rows, columns, and diagonals for a win
    for row in board:
        if all(s == player for s in row):
            return True
    for col in range(3):
        if all(row[col] == player for row in board):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2-i] == player for i in range(3)):
        return True
    return False

def is_board_full(board):
    return all(all(cell != " " for cell in row) for row in board)

def get_move(player):
    while True:
        try:
            move = input(f"Player {player}, enter your move (row and column): ").split()
            if len(move) != 2:
                raise ValueError("Please enter two numbers.")
            row, col = int(move[0]), int(move[1])
            if row not in range(3) or col not in range(3):
                raise ValueError("Move out of range. Please enter numbers between 0 and 2.")
            return row, col
        except ValueError as e:
            print(e)

def main():
    board = [[" " for _ in range(3)] for _ in range(3)]
    current_player = "X"
    
    while True:
        print_board(board)
        
        row, col = get_move(current_player)
        
        if board[row][col] != " ":
            print("Cell already taken. Choose another one.")
            continue
        
        board[row][col] = current_player
        
        if check_winner(board, current_player):
            print_board(board)
            print(f"Player {current_player} wins!")
            break
        
        if is_board_full(board):
            print_board(board)
            print("The game is a draw!")
            break
        
        current_player = "O" if current_player == "X" else "X"

if __name__ == "__main__":
    main()
